classDiagram
    class MidiParer{
        ushort Format
        ushort TrackCount
        ushort TimeDivision
        bool TimeBasedDivision
        List~Track~ Tracks
        float SecondsPerTick

        Parse(String path) void
        CalculateSecondsPerTick() float
    }

    class Track{
        Queue~Event~ Events
        Track(Chunk chunk) Track
    }

    class Chunk{
        string Type
        uint Length
        byte[] Data
        Chunk(BinaryReader reader) Chunk
    }

    Event <|-- MidiEvent
    Event <|-- MetaEvent
    Event <|-- SysExEvent

    class Event{
        ulong Delta
    }

    class MidiEventType {
        NoteOff
        NoteOn
        PolyphonicKeyPressure
        ControlChange
        ProgramChange
        ChannelPressure
        PitchWheelChange
        ChannelModeMessage
        SystemExclusive
        SongPositionPointer
        SongSelect
        TuneRequest
        EndOfExclusive
        TimingClock
        Start
        Continue
        Stop
        ActiveSensing
        Reset
    }

    <<enumeration>> MidiEventType

    class MetaEventType {
        SequenceNumber
        MidiChannelPrefix
        EndOfTrack
        SetTempo
        SMPTEOffset
        TimeSignature
        KeySignature
        Misc
    }

    <<enumeration>> MetaEventType

    class MidiEvent{
        MidiEventType Type
        MidiEvent(byte commandByte, BinaryReader reader) MidiEvent
    }

    class MetaEvent{
        uint MicroSecondsPerQuarterNote
        MetaEventType Type
        MetaEvent(BinaryReader reader) MetaEvent
    }

    class SysExEvent {
        SysExEvent(BinaryReader reader) SysExEvent
    }